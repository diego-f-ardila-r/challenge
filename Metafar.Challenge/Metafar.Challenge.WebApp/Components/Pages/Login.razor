@page "/login"
@using Metafar.Challenge.WebApp.Services
@inject MetafarServices MetafarService
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using Blazored.LocalStorage
@using Metafar.Challenge.WebApp.ViewModel
@using Microsoft.AspNetCore.Components.Forms
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

@rendermode InteractiveServer


<PageTitle>Generate Token</PageTitle>

<EditForm Model="loginModel" OnValidSubmit="GenerateToken">
    <DataAnnotationsValidator />

    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Generate Security Token</h3>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label for="cardNumber">NÃºmero de tarjeta</label>
                            <InputNumber id="cardNumber" class="form-control" place @bind-Value="loginModel.CardNumber" />
                            <ValidationMessage For="@(() => loginModel.CardNumber)" />
                        </div>
                        <div class="form-group">
                            <label for="pin">Access Pin</label>
                            <InputNumber id="pin" type="password" class="form-control" @bind-Value="loginModel.Pin" />
                            <ValidationMessage For="@(() => loginModel.Pin)" />
                        </div>
                        <button class="btn btn-primary mt-3" type="submit">Pin de acceso</button>
                        <div class="mt-3" role="alert" hidden="@string.IsNullOrEmpty(token)">
                            <strong>Token:</strong> @token
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private LoginModelViewModel loginModel = new();
    private string? token;

    private async Task GenerateToken()
    {
        var response = await MetafarService.GetTokenAsync(loginModel.CardNumber, loginModel.Pin);
        token = response?.Data?.Token;
        if (!string.IsNullOrEmpty(token))
        {
            await LocalStorage.SetItemAsync("token", $"{token}");
            
            Navigation.NavigateTo($"/account/{loginModel.CardNumber}");
        }
    }
}