@page "/account"
@using Metafar.Challenge.WebApp.Services
@using Metafar.Challenge.WebApp.ViewModel
@inject MetafarServices MetafarService
@inject AccountViewModel account
@rendermode InteractiveServer

<PageTitle>Account Information</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title d-flex align-items-center">
                        <i class="fas fa-user-circle me-2"></i> Información de la cuenta
                    </h3>
                </div>
                <div class="card-body">
                    @if (account != null)
                    {
                        <div class="row mb-3">
                            <div class="col-6">
                                <label class="fw-bold"><i class="fas fa-user"></i> Usuario</label>
                                <p>@account.UserName</p>
                            </div>
                            <div class="col-6">
                                <label class="fw-bold"><i class="fas fa-id-card"></i> Nombre</label>
                                <p>@account.FullName</p>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-6">
                                <label class="fw-bold"><i class="fas fa-hashtag"></i> Número de cuenta</label>
                                <p>@account.AccountNumber</p>
                            </div>
                            <div class="col-6">
                                <label class="fw-bold"><i class="fas fa-dollar-sign"></i> Saldo</label>
                                <p>@account.Balance.ToString("C")</p>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-12">
                                <label class="fw-bold"><i class="fas fa-calendar-alt"></i> Ultima extracción</label>
                                <p>@account.LastWithdrawalDate.ToString("MMMM dd, yyyy")</p>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <button class="btn btn-outline-secondary w-100" @onclick="ToggleOperations">
                                    <i class="fas fa-list"></i> @(showOperations ? "Hide Operations" : "Show Operations")
                                </button>
                                <div class="mt-3" style="display:@(showOperations ? "block" : "none")">
                                    @if (account.Operations?.Any() ?? false)
                                    {
                                        <table class="table table-striped">
                                            <thead>
                                                <tr>
                                                    
                                                    <th>Monto</th>
                                                    <th>Tipo Operación</th>
                                                    <th>Date</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var operation in account.Operations)
                                                {
                                                    <tr>
                                                        <td>@operation.Amount.ToString("C")</td>
                                                        <td>@operation.OperationType</td>
                                                        <td>@operation.CreatedDate.ToString("MMMM dd, yyyy")</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                        <nav>
                                            <ul class="pagination">
                                                <li class="page-item @(page == 1 ? "disabled" : "")">
                                                    <button class="page-link" @onclick="PreviousPage">Anterior</button>
                                                </li>
                                                <li class="page-item @(account.Operations.Count() < pageSize ? "disabled" : "")">
                                                    <button class="page-link" @onclick="NextPage">Siguiente</button>
                                                </li>
                                            </ul>
                                        </nav>
                                    }
                                    else
                                    {
                                        <p class="text-muted">No se registran operaciones</p>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p>Cargando informacónn de la cuenta...</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    int cardNumber = 12345678; // Replace with the actual card number
    int page = 1;
    int pageSize = 10;
    bool showOperations = false;

    protected override async Task OnInitializedAsync()
    {
        await account?.GetAccountViewModel(cardNumber);
    }

    private async Task GetOperations()
    {
        await account.GetOperations(cardNumber, page, pageSize);
    }

    private async Task ToggleOperations()
    {
        showOperations = !showOperations;
        
        if(!showOperations)
            await GetOperations();
    }

    private async Task PreviousPage()
    {
        if (page > 1)
        {
            page--;
            await GetOperations();
        }
    }

    private async Task NextPage()
    {
        if (account.Operations.Count() == pageSize)
        {
            page++;
            await GetOperations();
        }
    }
}