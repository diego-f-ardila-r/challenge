@page "/withdraw/{AccountNumber:int}/{CardNumber:int}"
@using Metafar.Challenge.WebApp.ViewModel
@inject NavigationManager Navigation
@inject WithdrawViewModel withdrawViewModel
@rendermode InteractiveServer

<PageTitle>Withdraw</PageTitle>

<div class="container mt-5">
    @if (!showResult)
    {
        <EditForm Model="withdrawViewModel" OnValidSubmit="WithdrawFromAccount">
        <DataAnnotationsValidator />
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h3 class="card-title">Extracción</h3>
                    </div>

                    <div class="card-body">
                        <p><strong>Número cuenta:</strong> @AccountNumber</p>
                        <p><strong>Número Tarjeta:</strong> @CardNumber</p>
                        <div class="mb-3">
                            <label for="amount" class="form-label">Ingrese un monto:</label>
                            <InputNumber id="amount" class="form-control" place @bind-Value="withdrawViewModel.OperationAmount"/>
                            <ValidationMessage For="@(() => withdrawViewModel.OperationAmount)"/>
                        </div>
                        
                        <button class="btn btn-primary mt-3" type="submit">Extraer</button>
                    </div>
                    <br>
                    <AlertComponent Color="@alertColor" IconName="@alertIconName" Message="@alertMessage" IsVisible="@isAlertVisible" />
                
                </div>
            </div>
        </div>
        </EditForm>
        
    }

    @if (showResult)
    {
        <div class="row justify-content-center mt-4">
            <div class="col-md-6">
                <div class="card shadow">
                    <div class="card-header bg-success text-white">
                        <h3 class="card-title">Resumen de extracción</h3>
                    </div>
                    <div class="card-body">
                        <p><strong>Código Operación:</strong> @withdrawViewModel.OperationId</p>
                        <p><strong>Número cuenta:</strong> @withdrawViewModel.AccountNumber</p>
                        <p><strong>Número Tarjeta:</strong> @withdrawViewModel.CardNumber</p>
                        <p><strong>Monto extraido:</strong> @withdrawViewModel.OperationAmount.ToString("C")</p>
                        <p><strong>Saldo:</strong> @withdrawViewModel.Balance.ToString("C")</p>
                        <p><strong>Fecha de Operación:</strong> @withdrawViewModel.OperationDate</p>
                    </div>
                </div>
                <br>
                <AlertComponent Color="@alertColor" IconName="@alertIconName" Message="@alertMessage" IsVisible="@isAlertVisible" />
            </div>
        </div>
    }

    <div class="row justify-content-center mt-4">
        <div class="col-md-6 text-center">
            <button class="btn btn-secondary" @onclick="ReturnToAccount">Ver Cuenta</button>
        </div>
    </div>
</div>

@code {
    
    // alert
    AlertColor alertColor = AlertColor.Primary;
    IconName alertIconName = IconName.CheckCircleFill;
    string alertMessage = string.Empty;
    bool isAlertVisible = false;
    
    [Parameter]
    public int AccountNumber { get; set; }
    [Parameter]
    public int CardNumber { get; set; }
    private double Amount { get; set; }
    private bool showResult = false;

    private async Task WithdrawFromAccount()
    {
        await withdrawViewModel.WithdrawFromAccountAsync(CardNumber, withdrawViewModel.OperationAmount);
        if (withdrawViewModel.Successful)
        {
            isAlertVisible = false;
            showResult = true;
        }
        else
        {
            isAlertVisible = true;
            ShowAlert(AlertColor.Warning, IconName.ExclamationTriangleFill, withdrawViewModel.MessageCode);
        }
    }

    private void ReturnToAccount()
    {
        Navigation.NavigateTo($"/account/{CardNumber}");
    }
    
    private void ShowAlert(AlertColor color, IconName iconName, string message)
    {
        alertColor = color;
        alertIconName = iconName;
        alertMessage = message;
    }
}