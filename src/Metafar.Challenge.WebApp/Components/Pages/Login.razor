@page "/login"
@using Metafar.Challenge.WebApp.Services
@inject MetafarService MetafarService
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using Blazored.LocalStorage
@using Metafar.Challenge.WebApp.ViewModel
@using Microsoft.AspNetCore.Components.Forms
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject LoginViewModel LoginViewModel
@using Metafar.Challenge.WebApp.Components

@rendermode InteractiveServer

<PageTitle>Generate Token</PageTitle>

<EditForm Model="LoginViewModel" OnValidSubmit="GenerateToken">
    <DataAnnotationsValidator />
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Generate Security Token</h3>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label for="cardNumber">NÃºmero de tarjeta</label>
                            <InputNumber id="cardNumber" class="form-control" place @bind-Value="LoginViewModel.CardNumber"/>
                            <ValidationMessage For="@(() => LoginViewModel.CardNumber)"/>
                        </div>
                        <div class="form-group">
                            <label for="pin">Pin</label>
                            <InputNumber id="pin" type="password" class="form-control" @bind-Value="LoginViewModel.Pin"/>
                            <ValidationMessage For="@(() => LoginViewModel.Pin)"/>
                        </div>
                        <button class="btn btn-primary mt-3" type="submit">Acceder</button>
                        
                    </div>
                    <br>
                    <AlertComponent Color="@alertColor" IconName="@alertIconName" Message="@alertMessage" IsVisible="@isAlertVisible" />
                </div>
            </div>
            
        </div>
    </div>
</EditForm>

@code {
    // alert
    AlertColor alertColor = AlertColor.Primary;
    IconName alertIconName = IconName.CheckCircleFill;
    string alertMessage = string.Empty;
    bool isAlertVisible = false;

    private async Task GenerateToken()
    {
        await LoginViewModel.GenerateToken();

        if (!string.IsNullOrEmpty(LoginViewModel.Token))
        {
            ShowAlert(AlertColor.Success, IconName.CheckCircleFill, "Login Exitoso");
            isAlertVisible = true;
            await Task.Delay(3000);
            Navigation.NavigateTo($"/account/{LoginViewModel.CardNumber}");
        }
        else
        {
            isAlertVisible = true;
            ShowAlert(AlertColor.Warning, IconName.ExclamationTriangleFill, LoginViewModel.MessageCode ?? "Error al generar token");
        }
    }

    private void ShowAlert(AlertColor color, IconName iconName, string message)
    {
        alertColor = color;
        alertIconName = iconName;
        alertMessage = message;
    }
}